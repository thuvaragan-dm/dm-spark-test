# .github/workflows/release-electron-app.yml
# This workflow runs in your PRIVATE source code repository (dm-spark-test)
# but publishes releases to your PUBLIC release repository (dm-desktop-release)
# OR a separate DEV release repository (e.g., dm-desktop-dev-release).
# It also updates a separate configuration repository (dm-desktop-configs).

name: Build, Release, and Update Configs

on:
  push:
    tags:
      - "v*.*.*" # Production releases (e.g., v1.0.0)
      - "dev-v*.*.*" # Development releases (e.g., dev-v0.1.0-alpha, dev-v1.0.0-dev.0)

jobs:
  release:
    runs-on: ${{ matrix.os }}

    # Conditionally select the GitHub Environment based on the tag prefix
    environment:
      name: ${{ startsWith(github.ref_name, 'dev-') && 'development' || 'production' }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Dependencies
        run: npm ci

      - name: Build and Package Electron App
        shell: bash
        run: |
          if [[ "${{ github.ref_name }}" == dev-* ]]; then
            echo "Running DEVELOPMENT package script..."
            npm run package:dev -- --publish onTag
          else
            echo "Running PRODUCTION package script..."
            npm run package:prod -- --publish onTag
          fi
        env:
          # GITHUB_TOKEN used by electron-builder. Sourced from the selected GitHub Environment.
          GITHUB_TOKEN: ${{ secrets.PAT_FOR_PUBLISH }}

          # === ADDED THIS LINE ===
          # Injects the PostHog API Key from the environment secret into the build process.
          # Your build tool (e.g., Vite) will use this variable.
          VITE_POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}

          # Other secrets for code signing can be included here as before.

  # --- NEW JOB TO UPDATE THE CONFIGURATION REPOSITORY ---
  update_config_repo:
    # This job runs only after the 'release' job has succeeded for all OSes.
    needs: release
    runs-on: ubuntu-latest

    # Use the same environment logic to access the PAT secret needed to push to the configs repo.
    environment:
      name: ${{ startsWith(github.ref_name, 'dev-') && 'development' || 'production' }}

    steps:
      - name: Checkout Configs Repository's Base Branch
        uses: actions/checkout@v4
        with:
          # Assumes the configs repo is in the same organization as this one.
          repository: ${{ github.repository_owner }}/dm-desktop-configs
          # Checks out the branch that contains the base config file.
          ref: "base_version"
          # Clones into a specific directory.
          path: "dm-desktop-configs"
          # Use the same PAT as the release job. It needs write permissions for the configs repo.
          token: ${{ secrets.PAT_FOR_CONFIGS }}

      - name: Create Version Branch and Update Files
        shell: bash
        run: |
          # 1. Determine the correct version name from the git tag.
          TAG_NAME=${{ github.ref_name }}
          if [[ "$TAG_NAME" == dev-* ]]; then
            VERSION_NAME=${TAG_NAME#dev-}
          else
            VERSION_NAME=$TAG_NAME
          fi
          echo "Triggering Tag: $TAG_NAME"
          echo "Target Version & Branch Name: $VERSION_NAME"

          # 2. Navigate into the checked-out repository directory.
          cd dm-desktop-configs

          # 3. Create a new branch from the current HEAD (which is 'base_version').
          git checkout -b "$VERSION_NAME"

          # 4. Update the 'version' field in config.json using jq.
          jq --arg ver "$VERSION_NAME" '.version = $ver' config.json > config.json.tmp && mv config.json.tmp config.json
          echo "Updated config.json with version $VERSION_NAME:"
          cat config.json

          # 5. Create a new, empty changelog.md file.
          touch changelog.md
          echo "Created empty changelog.md"

          # 6. Configure git user for the commit.
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 7. Add, commit, and push the new branch with the updated files.
          git add config.json changelog.md
          git commit -m "feat: Add config for version $VERSION_NAME"
          git push origin "$VERSION_NAME"
